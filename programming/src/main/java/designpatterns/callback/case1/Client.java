package designpatterns.callback.case1;

/**
 * @author matthew_wu
 * @since 2019-08-19 16:56
 */
public class Client {
    public static void main(String[] args) {
        MyButton button = new MyButton();
        button.setOnClickListener(new MyOnClickListener() {
            @Override
            public void onClick() {
                System.out.println("按钮被点击了");
            }
        });
        button.doClick();
    }
}


/*
首先，callback和“钩子”是两个完全不同的概念，callback是指：由我们自己实现的，但是预留给系统调用的函数，
我们自己是没有机会调用的，但是我们知道系统在什么情况下会调用该方法。而“钩子”是指：声明在抽象类中的方法，只
有空的或默认的实现，通常应用在模板设计模式中，让子类可以对算法的不同点进行选择或挂钩，要不要挂钩由子类决定。
在这里，我主要介绍callback，顺道分析了一下何为“钩子”。
CallBack是回调的意思，熟悉Windows编程的人对"回调函数"这四个字一定不会陌生，但是Java程序员对它可能就
不太了解了。"回调函数"或者"回调方法"是软件设计与开发中一个非常重要的概念，掌握"回调函数"的思想对程序员来说
(不管用哪种语言)是非常必要的。　　
那么什么是回调函数呢？我认为，回调函数就是预留给系统调用的函数，而且我们往往知道该函数被调用的时机。这里
有两点需要注意：
第一点，我们写回调函数不是给自己调用的，而是准备给系统在将来某一时刻调用的；
第二点，我们应该知道系统在什么情形下会调用我们写的回调函数。　
这里举个现实生活中"回调函数"的例子来帮助大家更好的理解。我们平时考试答题的第一件事是干嘛？没错，是写上学
号和姓名。这里注意了，我们填写学号和姓名不是给自己看的(即该方法不是给自己调用的)，而是给老师登记分数时看的
(预留给系统将来调用)，这其实就是一个回调的应用。
*/
